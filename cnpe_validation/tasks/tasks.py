import json
import zipfile
from abc import abstractmethod
from collections.abc import Callable
from io import BytesIO

import equinox as eqx
import jax.numpy as jnp
import jax.random as jr
import requests
from numpyro.infer import Predictive


class AbstractTask(eqx.Module):
    obs_name: eqx.AbstractClassVar[str]
    model: eqx.AbstractVar[Callable]
    guide: eqx.AbstractVar[Callable]

    @abstractmethod
    def get_obs_and_parameters(self, key):
        """Get the observations and parameters.

        The parameters are from a reference posterior if available, otherwise, they are
        the ground truth parameters used to generate the observation.
        """


class AbstractPosteriorDBTask(AbstractTask):
    """A task with a corresponding reference posterior on posteriordb.

    See https://github.com/stan-dev/posteriordb.
    """

    posterior_db_name: eqx.AbstractClassVar[str]

    @abstractmethod
    def get_obs(self):
        pass

    def get_obs_and_parameters(self, key):
        """Key is ignored, provided for consistency of API."""
        ref_posterior = get_posterior_db_reference_posterior(self.posterior_db_name)
        return self.get_obs(), ref_posterior


class AbstractTaskWithoutReference(AbstractTask):
    """A task without a reference posterior.

    The observation and parameters are generated by sampling the model.
    """

    def get_obs_and_parameters(self, key):
        """Generate an observation and ground truth latents from the model."""
        pred = Predictive(self.model, num_samples=1)
        key, subkey = jr.split(key)
        latents = pred(subkey)
        latents = {k: v.squeeze(0) for k, v in latents.items()}
        obs = latents.pop(self.obs_name)
        return obs, latents


def get_posterior_db_reference_posterior(name) -> dict:
    """Get the reference posterior draws from posteriordb.

    https://github.com/stan-dev/posteriordb

    Args:
        name: The name of the zip file containing the draws, exluding the extension.
    """
    # Targetting tagged release 0.5.0 for better reproducibility
    url = f"https://github.com/stan-dev/posteriordb/raw/0.5.0/posterior_database/reference_posteriors/draws/draws/{name}.json.zip"

    # Send a GET request to the URL
    response = requests.get(url)
    response.raise_for_status()
    zip_content = BytesIO(response.content)

    # Extract the zip file
    with zipfile.ZipFile(zip_content, "r") as zip_ref:
        assert len(zip_ref.infolist()) == 1
        zip_info = zip_ref.infolist()[0]

        # Extract the JSON file from the zip
        with zip_ref.open(zip_info) as json_file:
            # Read the JSON data
            draws = json.load(json_file)

    # Concatenate the chains
    draws = {
        k: jnp.concatenate([jnp.asarray(chain[k]) for chain in draws])
        for k in draws[0].keys()
    }

    # Names may be of form param[1] param[2]. We want to stack these into an array
    stacked_draws = {k.split("[")[0]: [] for k in draws.keys()}
    for k, v in draws.items():
        key_root = k.split("[")[0]
        stacked_draws[key_root].append(v)

    return {k: jnp.stack(v, axis=-1) for k, v in stacked_draws.items()}
